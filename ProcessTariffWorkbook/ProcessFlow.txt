Main:
	-->  ProcessRequiredFiles.GetRequiredData(args);
              GetArguments(args);
              StaticVariable.DirectoryName = GetDirectoryName();
              StaticVariable.XlsxFileName = GetInputXlsxFileName();      
              StaticVariable.CountryCodeValue = GetCountryCode();
              StaticVariable.DatasetFolderToUse = GetDatasetsFolderToUse();
              StaticVariable.HeaderFile = GetHeaderFile();            
              ReadHeaderFileIntoLists();
              ValidateData.CheckTariffPlanList();
              ValidateData.CheckTableLinksList();
              ValidateData.CheckTimeSchemesList();
              ValidateData.CheckTimeSchemeExceptionsList();
              ValidateData.CheckSpellingList();
              ValidateData.CheckSourceDestinationsBandList();
              ValidateData.CheckForStdIntAndBandsFile();   
              RearrangeDefaultEntries();      
              ValidateData.CheckForMoreThanTwoRegExFiles();
              CombineRegExFilesIntoCombinedRegexList(StaticVariable.DatasetFolderToUse);
              CombineRegExFilesIntoCombinedRegexList(StaticVariable.DatasetsFolder); //populates CombinedRegex list. needs more visiblilty    
              CreateFinalFolder();
              StaticVariable.CategoryMatrixXlsxFile = CreateXlsxFileName(Constants.CategoryMatrixFile); 
              CreateOutputXlsxFile(StaticVariable.CategoryMatrixXlsxFile);     
              StaticVariable.V6TwbOutputXlsxFile = CreateXlsxFileName(CreateNewFileName());
              CreateOutputXlsxFile(StaticVariable.V6TwbOutputXlsxFile);         
	
	--> ProcessInputXlsxFile.ParseInputXlsxFileIntoCustomerDetailsRecord();
            ReadXlsxFileIntoList(); = StaticVariable.InputXlsxFileDetails
            MergeDefaultPricesListWithInputFileList(); = StaticVariable.InputXlsxFileDetails
            AddToCustomerDetailsDataRecordList(StaticVariable.InputXlsxFileDetails); 
             			
	--> ValidateData.PreRegExMatchValidateCustomerDetailsRecord(); 
			StaticVariable.CountryExceptions = CreateCountryExceptionsHashset();
         CheckPricesAreInCorrectFormat();
         CheckTableNames();
         CheckForDestinationTypes();
         CheckRoundingForIncorrectEntry();
         CheckTimeSchemeForIncorrectEntry();
         CheckIfMinCostAndRate4SubseqAreSame();
         CheckGrouping();
         CheckIntervalLengthsGreaterOrEqualToZero();
         CheckUsingCustomerNames();
         CheckMinimumIntervals();
         CheckMinimumDigits();
         CheckMaximumPrices();
         CheckIfInitialIntervalSameAsSubsequentInterval();
         CheckCutOffDuration();
         CheckMultiLevelEnabled();
         CheckAllSchemes();
         CheckDialTime();
         CheckMinimumTime();
         CheckIntervalsAtInitialCostGreaterOrEqualToZero();
         CheckDestinationTypesNames();   

	--> StaticVariable.CustomerDetailsDataRecord.Clear();

	--> ProcessInputXlsxFile.MatchInputXlsxFileWithRegEx(StaticVariable.InputXlsxFileDetails); = StaticVariable.CustomerDetailsDataRecord     
    
    --> Prefixes.ProcessPrefixesData();
            ReadPrefixesIntoList(StaticVariable.DatasetFolderToUse, "Domestic");
            ReadPrefixesIntoList(StaticVariable.DatasetsFolder, "International"); 
            MatchPrefixNamesWithRegEx(StaticVariable.PrefixNumbersFromIniFiles);
               ValidateData.GetSourceAndDestinationNames();
            MatchPrefixNamesAndAddToPrefixesDataRecord(StaticVariable.PrefixesMatchedByRegEx, StaticVariable.PrefixNumbersFromIniFiles); 

	--> ValidateData.PostRegExMatchValidateCustomerDetailsRecord();
			CheckTablesForDefaultValue();
            CheckForMissingDefaultEntries();
            CheckForFreephone();
            CheckIfFreephoneIsFree();
            CheckForDuplicateBands();
            CheckForNonUniqueGroupBands();
            CheckSourceDestinationBandsPresentInPrefixBands();
            CheckGroupBands();
            CheckIfMinCostAnd4ThRateSamePrice();
            CheckIfAllMatrixBandsUsed();            
            CheckChargingType();
            CheckDestinationsAssignedMultipleBands();      

    --> Prefixes.ValidatePrefixesData();
            CheckForDestinationsWithoutPrefixes();
               ValidateData.CheckForCountyExceptions(entry))
               ValidateData.GetSourceAndDestinationNames();				
            CheckForDuplicatePrefixNumbers();
            CheckForNonMatchingPrefixNames();              
              
    --> ValidateData.DisplayMissingDetails();
            CheckDestinationsAssignedIncorrectTable();              
            CheckForNonMatchingCustomerNames();
            AddMainlandPricesToDependentCountries();
            FindMissingInternationalCountries();

    --> RearrangeCompletedFiles.CreateCategoryMatrix();     
         
    --> RearrangeCompletedFiles.WriteToV6TwbXlsxFile();
            WriteToBandsWorkSheet(workbook);
            WriteToTariffPlanSheet(workbook); 
                DisplayHolidays();
            WriteToTableLinksSheet(workbook);
            WriteToPrefixBandsSheet(workbook);        
            WriteToPrefixNumbersSheet(workbook, Prefixes.MatchPrefixesWithDestinations());
				Prefixes.GetNationalDomesticPrefixes();
            WriteToSourceDestinationBandsSheet(workbook);
            WriteToTimeSchemesSheet(workbook);
            WriteToTimeSchemesExceptionsSheet(workbook);  

    --> RearrangeCompletedFiles.WriteOutV5Tc2Files();  
            CreateV5Tc2PricesFile();      
                MakeGeneralHeader(v5PricesIni);
				AddDurationPrices(v5PricesIni);
					GetDurationPrices();
				AddCappedPrices(v5PricesIni);
					GetCappedPrices();
				AddPulsePrices(v5PricesIni);
					 GetPulsePrices();
				GetDurationMatrix(v5PricesIni);
				GetCappedMatrix(v5PricesIni);
				GetPulseMatrix(v5PricesIni);
				WriteToV5Tc2PricesFile(v5PricesIni);
            WritePrefixIniFiles(Prefixes.MatchPrefixesWithDestinations()); 
				Prefixes.GetNationalDomesticPrefixes();                        

    --> RearrangeCompletedFiles.CopyOutputXlsxFileToV6OpUtilFolder(StaticVariable.MoveOutputSpreadSheetToV6TwbFolder);      
         
    --> ErrorProcessing.CreateAndWriteToRegExMatchedLog();

    --> StaticVariable.ProgressDetails.Add(Environment.NewLine + "........finished");
    --> StaticVariable.ConsoleOutput.Add(Environment.NewLine + "........finished");
    --> ErrorProcessing.OutputToLogs(StaticVariable.ProgressDetails, StaticVariable.DirectoryName + @"\" + Constants.ProgressLog);
    --> ErrorProcessing.OutputToLogs(StaticVariable.ConsoleOutput, StaticVariable.DirectoryName + @"\" + Constants.ConsoleErrorLog);
    --> ErrorProcessing.OutputConsoleLog();

===================================================================



1) RearrangeDefaultEntries():  This will become obsolete
   need to add a check into duplication of line is default headers
   this change - change the header to be one one line and you copy it into the spreadsheet, deleting / commenting out the ones not required?
   e.g DQ	0.0400	0.0400	0.0400	0.0400	0.0400	0.0400	0.0000	0.0000	0.0210	TRUE	3	Band 3	44_International	International	exact	BT	false	60	60	0	1	1	1	TRUE	FALSE	0	0	0	duration	


	